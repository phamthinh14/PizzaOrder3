
# FOR CLOUDINARY
#cloud.name=dzk3cvgwt
#cloud.secret=NekId8hlbGdKRMO9oyY5DyUV3P0
#cloud.key=457744248759935
#===============================================================================================================
# FOR H2
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.url=jdbc:h2:mem:testdb
#server.port=8080
#===============================================================================================================
# FOR MYSQL
spring.jpa.hibernate.ddl-auto=create
spring.datasource.url=jdbc:mysql://localhost:3306/pizzas
spring.datasource.username=root
spring.datasource.password=Conmeo123!@
useSSL=false
spring.jpa.show-sql=true
#===============================================================================================================
# FOR POSTGRESQL
# If you want to push the project on heroku, use these lines. It works
# NOTES: SOME COMMAND LINE FOR HEROKU. IF YOU ARE STUCK AT THE OLD HEROKU APPLICATION.
# git remote -v THIS COMMAND WILL LET USE CHECK IF THE HEROKU IS STILL IN OUR COMMAND LINE
# git remote rm heroku THIS COMMAND IS TO DELETE ALL HEROKU THAT REMAIN IN THE SYSTEM
# DELETE IT WILL HELP US DEPLOY OUR PROJECT TO A NEW APPLICATION
#spring.datasource.url=${JDBC_DATABASE_URL}
#spring.datasource.username=${JDBC_DATABASE_USERNAME}
#spring.datasource.password=${JDBC_DATABASE_PASSWORD}
#spring.jpa.show-sql=false
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update
# initial commit to Heroku always runs with "create",
# open app on Heroku, so that the db is created,
# then come back to replace the word with "update"
# and push to Heroku again
#===============================================================================================================